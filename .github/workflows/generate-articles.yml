# name: Generate Articles

# on:
#   schedule:
#     - cron: '0 */2 * * *'
#   workflow_dispatch:
#   push:
#     branches: [ main ]
#     paths:
#       - '.github/workflows/**'

# permissions:
#   contents: write
#   actions: read

# jobs:
#   generate-articles:
#     runs-on: ubuntu-latest
#     timeout-minutes: 60

#     env:
#       GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
#       GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
#       GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
#       GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
#       GEMINI_API_KEY_4: ${{ secrets.GEMINI_API_KEY_4 }}
#       GEMINI_API_KEY_5: ${{ secrets.GEMINI_API_KEY_5 }}
#       GEMINI_API_KEY_6: ${{ secrets.GEMINI_API_KEY_6 }}
#       CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
#       CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
#       CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
#       CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
#       EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
#       AMAZON_ACCESS_KEY: ${{ secrets.AMAZON_ACCESS_KEY }}
#       AMAZON_SECRET_KEY: ${{ secrets.AMAZON_SECRET_KEY }}
#       AMAZON_PARTNER_TAG: ${{ secrets.AMAZON_PARTNER_TAG }}

#     steps:
#       - name: ⬇️ Checkout repository
#         uses: actions/checkout@v4
#         with:
#           token: ${{ secrets.GITHUBTOKEN }}
#           fetch-depth: 0

#       - name: 🐍 Set up Python 3.11
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'
#           cache: 'pip'

#       - name: 📦 Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install \
#             google-genai pillow six requests markdown pyyaml numpy \
#             scikit-learn nltk coverage nose pluggy py randomize \
#             simplejson python-dotenv
#           pip install --no-deps \
#             git+https://${{ secrets.GITHUBTOKEN }}@github.com/Telefonica/amazon-paapi5-sdk.git

#       - name: 🗂️ Create required directories
#         run: |
#           mkdir -p generated-articles
#           mkdir -p data
#           mkdir -p article-prompts  # Added to ensure directory exists

#       - name: 🧪 Check for required files
#         run: |
#           touch data/keywords.txt
#           touch data/processed_keywords.txt
#           touch data/keywords-generated.txt
#           touch data/links.txt

#       - name: 🚀 Run article generation script
#         id: generate
#         continue-on-error: true
#         run: |
#           echo "Running article generator..."
#           if [ -f ".github/scripts/generate_articles.py" ]; then
#             python .github/scripts/generate_articles.py
#           else
#             echo "::error:: generate_articles.py not found"
#             ls -la .github/scripts/ || echo "No scripts directory"
#             exit 1
#           fi

#       - name: 🔎 Check for file changes
#         id: verify-changed-files
#         run: |
#           if git diff --quiet && git diff --staged --quiet; then
#             echo "changed=false" >> $GITHUB_OUTPUT
#           else
#             echo "changed=true" >> $GITHUB_OUTPUT
#             git status
#           fi

#       - name: ✅ Commit and push changes
#         if: steps.verify-changed-files.outputs.changed == 'true'
#         run: |
#           git config --local user.name 'github-actions[bot]'
#           git config --local user.email 'github-actions[bot]@users.noreply.github.com'
#           git add generated-articles/ data/ article-prompts/ .last_keyword_index || true
#           git commit -m "Auto-generate articles and prompts $(date -u '+%Y-%m-%d %H:%M:%S UTC') [skip ci]" || exit 0
#           for i in 1 2 3; do
#             git push && break || sleep 5
#           done

#       - name: 📋 Create workflow summary
#         if: always()
#         run: |
#           echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
#           echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
#           echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
#           echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
#           echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
#           echo "- **Articles Generated**: $(ls generated-articles/*.md 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
#           echo "- **Prompts Saved**: $(ls article-prompts/*.txt 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY

#       - name: 🕰️ Keep repository active
#         if: always()
#         run: |
#           echo "Workflow completed at $(date -u)" > .github/last_run.txt
#           git add .github/last_run.txt || true
#           git commit -m "Update last run timestamp [skip ci]" || true
#           git push || true

#       - name: ❌ Notify on failure
#         if: failure()
#         run: |
#           echo "::error:: Article generation workflow failed"
#           echo "Check logs above for details"
name: Generate Articles

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes (for testing only)
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - '.github/scripts/**'  # Added to trigger on script changes

permissions:
  contents: write
  actions: write  # Changed from read to write for better permissions
  pages: write
  id-token: write

jobs:
  generate-articles:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
      GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
      GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
      GEMINI_API_KEY_4: ${{ secrets.GEMINI_API_KEY_4 }}
      GEMINI_API_KEY_5: ${{ secrets.GEMINI_API_KEY_5 }}
      GEMINI_API_KEY_6: ${{ secrets.GEMINI_API_KEY_6 }}
      CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      AMAZON_ACCESS_KEY: ${{ secrets.AMAZON_ACCESS_KEY }}
      AMAZON_SECRET_KEY: ${{ secrets.AMAZON_SECRET_KEY }}
      AMAZON_PARTNER_TAG: ${{ secrets.AMAZON_PARTNER_TAG }}

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUBTOKEN }}
          fetch-depth: 0

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            google-genai pillow six requests markdown pyyaml numpy \
            scikit-learn nltk coverage nose pluggy py randomize \
            simplejson python-dotenv
          pip install --no-deps \
            git+https://${{ secrets.GITHUBTOKEN }}@github.com/Telefonica/amazon-paapi5-sdk.git

      - name: 🗂️ Create required directories
        run: |
          mkdir -p generated-articles
          mkdir -p data
          mkdir -p article-prompts

      - name: 🧪 Check for required files
        run: |
          touch data/keywords.txt
          touch data/processed_keywords.txt
          touch data/keywords-generated.txt
          touch data/links.txt

      - name: 🚀 Run article generation script
        id: generate
        run: |
          echo "Running article generator..."
          echo "Current directory: $(pwd)"
          echo "Files in .github/scripts/:"
          ls -la .github/scripts/ || echo "No scripts directory found"
          
          if [ -f ".github/scripts/generate_articles.py" ]; then
            echo "Found generate_articles.py, executing..."
            python .github/scripts/generate_articles.py
            echo "Script execution completed with exit code: $?"
          else
            echo "::error:: generate_articles.py not found at .github/scripts/generate_articles.py"
            echo "Searching for Python files..."
            find . -name "*.py" -type f | head -10
            exit 1
          fi

      - name: 🔎 Check for file changes
        id: verify-changed-files
        run: |
          echo "Checking for changes..."
          git status --porcelain
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: ✅ Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Stage all changes
          git add generated-articles/ data/ article-prompts/ .last_keyword_index || true
          
          # Check if there are actually staged changes
          if git diff --staged --quiet; then
            echo "No staged changes to commit"
            exit 0
          fi
          
          # Commit with timestamp
          git commit -m "Auto-generate articles and prompts $(date -u '+%Y-%m-%d %H:%M:%S UTC') [skip ci]"
          
          # Push with retry logic
          for i in 1 2 3; do
            echo "Push attempt $i/3"
            if git push; then
              echo "Push successful"
              break
            else
              echo "Push failed, retrying in 5 seconds..."
              sleep 5
              if [ $i -eq 3 ]; then
                echo "::error:: Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: 📋 Create workflow summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          # Count files more safely
          ARTICLE_COUNT=$(find generated-articles -name "*.md" 2>/dev/null | wc -l)
          PROMPT_COUNT=$(find article-prompts -name "*.txt" 2>/dev/null | wc -l)
          
          echo "- **Articles Generated**: $ARTICLE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Prompts Saved**: $PROMPT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: 🕰️ Keep repository active
        if: always()
        run: |
          echo "Last workflow run: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .github/last_run.txt
          echo "Trigger: ${{ github.event_name }}" >> .github/last_run.txt
          echo "Status: ${{ job.status }}" >> .github/last_run.txt
          
          # Only commit if file actually changed
          if ! git diff --quiet .github/last_run.txt 2>/dev/null; then
            git add .github/last_run.txt
            git commit -m "Update last run timestamp [skip ci]" || true
            git push || true
          fi

      - name: ❌ Notify on failure
        if: failure()
        run: |
          echo "::error:: Article generation workflow failed"
          echo "::error:: Check the logs above for specific error details"
          echo "::error:: Common issues: missing files, API rate limits, permission problems"